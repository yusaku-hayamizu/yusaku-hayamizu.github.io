-#author("2019-12-04T04:17:20+00:00","","")
+#author("2019-12-04T05:06:51+00:00","","")
 [[Program]]
 
 #contents
 
 ~
 * [[Cefore:https://cefore.net]] [#o187e1c7]
 
 Cefore is a software platform to enable CCN-like communications in Ubuntu, Raspbian, Jessie macOS and Android.
 
 ** &color(red){Installation (TBD)}; [#d796f986]
 
 *** Ubuntu [#m4f15d78]
 
-Install OpenSSL.
+Install libraries.
 
  $ sudo apt-get install libssl-dev
 
  $ sudo apt-get install automake
 
  $ ./configure
  
 
 
 *** macOS [#hcb6224a]
  $ sudo brew install automake
 
  $ brew info openssl
  openssl: stable 1.0.2s (bottled) [keg-only]
  SSL/TLS cryptography library
  https://openssl.org/
  /usr/local/Cellar/openssl/1.0.2s (1,795 files, 12.0MB)
    Poured from bottle on 2019-06-12 at 18:45:00
  From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/openssl.rb
  ==> Caveats
  A CA file has been bootstrapped using certificates from the SystemRoots
  keychain. To add additional certificates (e.g. the certificates added in
  the System keychain), place .pem files in
    /usr/local/etc/openssl/certs
  
  and run
    /usr/local/opt/openssl/bin/c_rehash
  
  openssl is keg-only, which means it was not symlinked into /usr/local,
  because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries.
  
  If you need to have openssl first in your PATH run:
    echo 'export PATH="/usr/local/opt/openssl/bin:$PATH"' >> ~/.bash_profile
  
  For compilers to find openssl you may need to set:
    export LDFLAGS="-L/usr/local/opt/openssl/lib"
    export CPPFLAGS="-I/usr/local/opt/openssl/include"
 
  $ ./configure --enable-cefping --enable-csmgr opssl_header_path="/usr/local/opt/openssl/include/" LDFLAGS="-L/usr/local/opt/openssl/lib" CPPFLAGS="-I/usr/local/opt/openssl/include/"
 
 
  $ make
  $ sudo make install
 
 Create path to cefnetd/csmgrd to call the daemons,
 
  $ export PATH="/usr/local/sbin:$PATH"
 
 or add the above text to the bash profile "~/.profile".
 
 
 
 
 ** Getting Started [#j92003ca]
 Create "csmgrd" and "cefnetd" daemons with the following commands.
 
  $ csmgrdstart
  $ cefnetdstart
 
 After the daemons were created, check the status.
 
  $ cefstatus
  Version    : 1
  Port       : 9896
  Rx Frames  : 0
  Tx Frames  : 0
  Cache Mode : Excache
  Faces : 6
    faceid =   4 : IPv4 Listen face (udp)
    faceid =   0 : Local face
    faceid =   5 : IPv6 Listen face (udp)
    faceid =   6 : IPv4 Listen face (tcp)
    faceid =   7 : IPv6 Listen face (tcp)
    faceid =  17 : Local face
  FIB(App) :
    Entry is empty
  FIB :
    Entry is empty
  PIT(App) :
    Entry is empty
  PIT :
    Entry is empty
  
   $ csmgrstatus
  Connect to 127.0.0.1:9799
  *****   Connection Status Report   *****
  All Connection Num             : 1
  
  *****   Cache Status Report        *****
  Number of Cached Contents      : 0
 
 Put an example file (example.txt) whose name is "ccn:/example" with
  $ cefputfile ccn:/example -f ./example.txt
  [cefputfile] Start
  [cefputfile] Parsing parameters ... OK
  [cefputfile] Init Cefore Client package ... OK
  [cefputfile] Conversion from URI into Name ... OK
  [cefputfile] Checking the input file ... OK
  [cefputfile] Connect to cefnetd ... OK
  [cefputfile] URI         = ccn:/example
  [cefputfile] File        = Desktop/cal-average.cc~
  [cefputfile] Rate        = 5.000 Mbps
  [cefputfile] Block Size  = 1024 Bytes
  [cefputfile] Cache Time  = 300 sec
  [cefputfile] Expiration  = 3600 sec
  [cefputfile] Start creating Content Objects
  [cefputfile] Unconnect to cefnetd ... OK
  [cefputfile] Terminate
  [cefputfile] Tx Frames  = 2
  [cefputfile] Tx Bytes   = 1765
  [cefputfile] Duration   = 0.006 sec
  [cefputfile] Throughput = 2771888 bps
 
 and get the file with the following command.
 
  $ cefgetfile ccn:/example -f ./output.txt
  [cefgetfile] Start
  [cefgetfile] Parsing parameters ... OK
  [cefgetfile] Init Cefore Client package ... OK
  [cefgetfile] Conversion from URI into Name ... OK
  [cefgetfile] Checking the output file ... OK
  [cefgetfile] Connect to cefnetd ... OK
  [cefgetfile] URI=ccn:/example
  [cefgetfile] Start sending Interests
  [cefgetfile] Complete
  [cefgetfile] Unconnect to cefnetd ... OK
  [cefgetfile] Terminate
  [cefgetfile] Rx Frames = 2
  [cefgetfile] Rx Bytes  = 1765
  [cefgetfile] Duration  = 0.000 sec
  [cefgetfile] Jitter (Ave) = 0 us
  [cefgetfile] Jitter (Max) = 0 us
  [cefgetfile] Jitter (Var) = 0 us
 
 You can check the content of the fetched file.
 
  $ cat example.txt
  hello, world.
  $ cat output.txt
  hello, world.
 When you want to kill the daemons, you just type as follows.
  $ csmgrdstop
  $ cefnetdstop
 
 [Optional] Use "-F" option to completely kill the daemons.
  $ csmgrdstop -F
  $ cefnetdstop -F
 
 
 
 ~
 * [[Cefpyco]] [#ob5dc365]
 
 Cefpyco is python-wrapper of Cefore to develop Cefore-based applications.
 
 ** Installation [#y9a36f41]
 
 *** Ubuntu [#j99d25dc]
 
 Download the install package "cefpyco-0.3.7.zip" from [[this site:https://cefore.net/download]].
 
 After [[the installation of Cefore>#d796f986]], you must run the following commands. Don't forget to type "." when the "cmake" command.
 
  $ sudo apt-get install cmake python-pip
  $ pip install setuptools click numpy
  $ cmake .
  $ sudo make install
 
 From now on, you can use "import cefpyco" in any directory. If you don't use "cefapp", "click" and "numpy" installation can be omitted.
 
 
 ** Getting Started [#b682d041]
 
 
 
 
 &color(red){pytest (TBD)};
